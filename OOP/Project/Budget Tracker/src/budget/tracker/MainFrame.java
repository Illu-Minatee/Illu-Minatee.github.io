/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package budget.tracker;

import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kasul
 */
public class MainFrame extends javax.swing.JFrame {

    
    // This ArrayList will hold all of our transaction objects in memory.
    ArrayList<transaction> transactions = new ArrayList<>();
    // This variable will store the index of the transaction being edited.
    // -1 will mean we are NOT editing, we are adding a new one.
    private int currentlyEditingIndex = -1;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        // Add some sample transactions to start
        transactions.add(new transaction("Paycheck", 2000.00, LocalDate.now(), "Income"));
        transactions.add(new transaction("Groceries", -75.50, LocalDate.now().minusDays(1), "Food"));
        transactions.add(new transaction("Gas", -40.00, LocalDate.now().minusDays(2), "Transportation"));

        // Call our master update method for the first time to display the data.
        updateEverything();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transactionDialog = new javax.swing.JDialog();
        dialogPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        amountSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        dateField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        incomeLabel = new javax.swing.JLabel();
        expensesLabel = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        transactionTable = new javax.swing.JTable();
        addTransactionButton = new javax.swing.JButton();
        editTransactionButton = new javax.swing.JButton();
        deleteTransactionButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();

        transactionDialog.setTitle("Add/Edit Transaction");
        transactionDialog.setModal(true);

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel1.setText("Description:");

        descriptionField.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel2.setText("Amount:");

        amountSpinner.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        amountSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));
        amountSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(amountSpinner, "$00.00"));

        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel3.setText("Category:");

        categoryComboBox.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Income", "Food", "Utilities", "Transportation", "Entertainment" }));

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel4.setText("Date:");

        dateField.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        okButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogPanelLayout = new javax.swing.GroupLayout(dialogPanel);
        dialogPanel.setLayout(dialogPanelLayout);
        dialogPanelLayout.setHorizontalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionField)
                    .addComponent(amountSpinner)
                    .addComponent(dateField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dialogPanelLayout.createSequentialGroup()
                        .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(okButton)
                .addGap(116, 116, 116)
                .addComponent(cancelButton)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        dialogPanelLayout.setVerticalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(amountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout transactionDialogLayout = new javax.swing.GroupLayout(transactionDialog.getContentPane());
        transactionDialog.getContentPane().setLayout(transactionDialogLayout);
        transactionDialogLayout.setHorizontalGroup(
            transactionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dialogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        transactionDialogLayout.setVerticalGroup(
            transactionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dialogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Budget Tracker - Nischal");
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(204, 204, 204));

        incomeLabel.setBackground(new java.awt.Color(255, 255, 255));
        incomeLabel.setFont(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        incomeLabel.setForeground(new java.awt.Color(0, 204, 0));
        incomeLabel.setText("Total Income: $0.00");

        expensesLabel.setBackground(new java.awt.Color(255, 255, 255));
        expensesLabel.setFont(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        expensesLabel.setForeground(new java.awt.Color(255, 0, 0));
        expensesLabel.setText("Total Expenses: $0.00");

        balanceLabel.setBackground(new java.awt.Color(255, 255, 255));
        balanceLabel.setFont(new java.awt.Font("Segoe Print", 3, 18)); // NOI18N
        balanceLabel.setText("Current Balance: $0.00");

        transactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Description", "Category", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transactionTable.getTableHeader().setResizingAllowed(false);
        transactionTable.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(transactionTable);
        if (transactionTable.getColumnModel().getColumnCount() > 0) {
            transactionTable.getColumnModel().getColumn(0).setResizable(false);
            transactionTable.getColumnModel().getColumn(1).setResizable(false);
            transactionTable.getColumnModel().getColumn(1).setPreferredWidth(250);
            transactionTable.getColumnModel().getColumn(2).setResizable(false);
            transactionTable.getColumnModel().getColumn(3).setResizable(false);
        }

        addTransactionButton.setBackground(new java.awt.Color(204, 204, 255));
        addTransactionButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addTransactionButton.setText("Add Transaction");
        addTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTransactionButtonActionPerformed(evt);
            }
        });

        editTransactionButton.setBackground(new java.awt.Color(204, 204, 255));
        editTransactionButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        editTransactionButton.setText("Edit Selected");
        editTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTransactionButtonActionPerformed(evt);
            }
        });

        deleteTransactionButton.setBackground(new java.awt.Color(204, 204, 255));
        deleteTransactionButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteTransactionButton.setText("Delete Selected");
        deleteTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTransactionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScrollPane)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(incomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(expensesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(balanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(addTransactionButton)
                        .addGap(163, 163, 163)
                        .addComponent(editTransactionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteTransactionButton)
                        .addGap(28, 28, 28)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(incomeLabel)
                    .addComponent(expensesLabel)
                    .addComponent(balanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTransactionButton)
                    .addComponent(editTransactionButton)
                    .addComponent(deleteTransactionButton))
                .addGap(21, 21, 21))
        );

        fileMenu.setText("File");

        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        loadMenuItem.setText("Load");
        loadMenuItem.setEnabled(false);
        fileMenu.add(loadMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void editTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTransactionButtonActionPerformed
        // TODO add your handling code here:
        
        // --- Prepare dialog for EDITING an existing transaction ---

        // 1. Get the selected row index.
        int selectedIndex = transactionTable.getSelectedRow();

        // 2. Check if a row is actually selected.
        if (selectedIndex == -1) {
            // If not, show a warning and stop.
            JOptionPane.showMessageDialog(this, "Please select a transaction to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return; // Stop the method here
        }

        // 3. Get the actual transaction object from our list.
        transaction selectedTransaction = transactions.get(selectedIndex);

        // 4. Change the dialog's title to "Edit" mode.
        transactionDialog.setTitle("Edit Transaction");

        // 5. Populate the dialog's fields with the data from the selected transaction.
        descriptionField.setText(selectedTransaction.getDescription());
        amountSpinner.setValue(selectedTransaction.getAmount());
        categoryComboBox.setSelectedItem(selectedTransaction.getCategory());
        dateField.setText(selectedTransaction.getDate().toString());

        // 6. Make the dialog visible.
        transactionDialog.pack();
        transactionDialog.setLocationRelativeTo(this);
        
        // Store the index of the item we are about to edit.
        // The 'selectedIndex' variable is already available from the code above.
        currentlyEditingIndex = selectedIndex;
        transactionDialog.setVisible(true);
    }//GEN-LAST:event_editTransactionButtonActionPerformed

    private void deleteTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTransactionButtonActionPerformed
        // TODO add your handling code here:
        
        // 1. Get the index of the row that the user has selected.
        // If no row is selected, this will be -1.
        int selectedIndex = transactionTable.getSelectedRow();

        // 2. Check if the user has selected a row.
        if (selectedIndex == -1) {
            // If they haven't, show a warning message and do nothing else.
            JOptionPane.showMessageDialog(this, "Please select a transaction to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
        } else {
            // 3. If a row is selected, ask for confirmation before deleting.
            int choice = JOptionPane.showConfirmDialog(
                this, // Parent component
                "Are you sure you want to delete this transaction?", // Message
                "Confirm Deletion", // Title
                JOptionPane.YES_NO_OPTION, // Button options
                JOptionPane.QUESTION_MESSAGE // Icon
            );

            // 4. Check the user's choice.
            if (choice == JOptionPane.YES_OPTION) {
                // If they clicked "Yes", remove the transaction from the ArrayList.
                transactions.remove(selectedIndex);

                // 5. IMPORTANT: Call our master update method to refresh everything.
                updateEverything();
            }
            // If they clicked "No", do nothing.
        }
    }//GEN-LAST:event_deleteTransactionButtonActionPerformed
    
    // Greyed out save and load button
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void addTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTransactionButtonActionPerformed
        // TODO add your handling code here:
        
        // --- Prepare dialog for ADDING a new transaction ---

        // 1. Change the dialog's title to be specific for "Add" mode.
        transactionDialog.setTitle("Add New Transaction");

        // 2. Clear out any old data from a previous use.
        descriptionField.setText("");
        amountSpinner.setValue(0.0);
        categoryComboBox.setSelectedIndex(0); // Set to the first item
        dateField.setText(LocalDate.now().toString()); // Set date to today by default

        // 3. Make the dialog visible.
        transactionDialog.pack(); // Resize to fit contents
        transactionDialog.setLocationRelativeTo(this); // Center on the main window
        
        // Set the editing index to -1 to signal that we are ADDING a new item.
        currentlyEditingIndex = -1;
        transactionDialog.setVisible(true);
    }//GEN-LAST:event_addTransactionButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        
        transactionDialog.setVisible(false); // This simply hides the dialog box
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        
         // --- 1. Get and Validate Description ---
        String description = descriptionField.getText().trim();
        if (description.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Description cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop
        }

        // --- 2. Get and Validate Amount from Spinner ---
        double amount; // Declare amount variable
        try {
            // This forces the spinner to process typed text. Throws an error if invalid.
            amountSpinner.commitEdit(); 
            amount = (double) amountSpinner.getValue();
        } catch (java.text.ParseException e) {
            // This runs if the user typed "abc" or other invalid text.
            JOptionPane.showMessageDialog(this, "Invalid number format in Amount field.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop
        }

        // --- 3. Get Category and Perform Logic Validation ---
        String category = categoryComboBox.getSelectedItem().toString();

        // Check for negative income
        if (category.equals("Income") && amount < 0) {
            JOptionPane.showMessageDialog(this, "Income amount cannot be negative.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop
        }
        
        // --- ADDED THIS NEW CHECK ---
        if (amount == 0) {
            JOptionPane.showMessageDialog(this, "Transaction amount cannot be zero.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop
        }

        // Auto-correct amount for expenses
        if (!category.equals("Income") && amount > 0) {
            amount = amount * -1;
        }

        // --- 4. Get and Validate Date ---
        LocalDate date;
        try {
            date = LocalDate.parse(dateField.getText());
        } catch (java.time.format.DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop
        }

        // --- 5. If all validation passes, proceed with Add or Edit ---
        if (currentlyEditingIndex == -1) {
            // ADD MODE
            transaction newTransaction = new transaction(description, amount, date, category);
            transactions.add(newTransaction);
        } else {
            // EDIT MODE
            transaction transactionToEdit = transactions.get(currentlyEditingIndex);
            transactionToEdit.setDescription(description);
            transactionToEdit.setAmount(amount);
            transactionToEdit.setCategory(category);
            transactionToEdit.setDate(date);
        }

        // --- 6. Final step: update screen and close dialog ---
        updateEverything();
        transactionDialog.setVisible(false);

    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    /**
 * This is the master update method. It recalculates all summary totals
 * and refreshes the JTable to match the current data in the ArrayList.
 */
public void updateEverything() {
    // --- 1. Calculate Summaries ---
    double totalIncome = 0;
    double totalExpenses = 0;
    
    for (transaction t : transactions) {
        if (t.getAmount() >= 0) { // Positive amounts are income
            totalIncome += t.getAmount();
        } else { // Negative amounts are expenses
            totalExpenses += t.getAmount(); // totalExpenses will be negative
        }
    }
    double balance = totalIncome + totalExpenses; // Add a negative to subtract

    // --- 2. Update GUI Labels ---
    // String.format is used to ensure the amounts are shown as currency (2 decimal places)
    incomeLabel.setText(String.format("Total Income: $%.2f", totalIncome));
    // Use Math.abs() to show the expense as a positive number (e.g., -$50 becomes $50.00)
    expensesLabel.setText(String.format("Total Expenses: $%.2f", Math.abs(totalExpenses)));
    balanceLabel.setText(String.format("Current Balance: $%.2f", balance));

    // --- 3. Update the JTable ---
    DefaultTableModel model = (DefaultTableModel) transactionTable.getModel();
    model.setRowCount(0); // Clear the table completely

    for (transaction t : transactions) {
        Object[] rowData = {
            t.getDate().toString(), // Convert LocalDate to String
            t.getDescription(),
            t.getCategory(),
            String.format("$%.2f", t.getAmount()) // Format amount as currency
        };
        model.addRow(rowData);
    }
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTransactionButton;
    private javax.swing.JSpinner amountSpinner;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JTextField dateField;
    private javax.swing.JButton deleteTransactionButton;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JPanel dialogPanel;
    private javax.swing.JButton editTransactionButton;
    private javax.swing.JLabel expensesLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel incomeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JDialog transactionDialog;
    private javax.swing.JTable transactionTable;
    // End of variables declaration//GEN-END:variables
}